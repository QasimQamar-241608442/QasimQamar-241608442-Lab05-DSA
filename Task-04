#Task-04 Check Balanced Parentheses Using Stack 
class Stack() : 
    def __init__(self):
        self.items = []

    def push(self,item):
        self.items.append(item)
        print(f"Pushed: {item}")

    def pop(self):
        if self.is_empty():
            print("List is empty.")
            return None
        pop_item = self.items.pop()
        print(f"Popped: {pop_item}")
        return pop_item 
    
    def peek(self):
        if self.is_empty():
            print ("List is empty.")
            return None
        return self.items[-1] 
    
    def is_empty(self):
        return len(self.items) == 0 
    
    def size(self):
        return len(self.items) 


def is_balanced(expression):
    stack = Stack()
    opening = "({["
    closing = ")}]"
    matches = {')': '(', '}': '{', ']': '['}

    for char in expression:
        if char in opening:
            stack.push(char)
        elif char in closing:
            if stack.is_empty() or stack.pop() != matches[char]:
                return False
    return stack.is_empty()

if __name__ == "__main__":
    expression = input("Enter an expression: ")
    if is_balanced(expression):
        print("The expression is balanced.")
    else:
        print("The expression is unbalanced.")
